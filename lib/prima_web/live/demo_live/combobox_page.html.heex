<div class="prose prose-slate">
  <div class="border-b border-gray-200 mb-6">
    <h1>Combobox</h1>
  </div>

  <p>
    A fully accessible searchable input with intelligent positioning, keyboard navigation, and flexible data handling.
    Perfect for autocomplete scenarios, large option sets, and user-generated content.
  </p>

  <p>
    The combobox combines text input with dropdown suggestions, supporting both frontend filtering and server-side async search.
    Features full keyboard navigation, smart positioning with <a href="https://floating-ui.com/" target="_blank" rel="noopener noreferrer" class="text-indigo-600 hover:text-indigo-800">Floating UI</a>, and seamless Phoenix form integration.
  </p>

  <h2>Quick Start</h2>
  <p>
    The most basic combobox requires three components: <code>.combobox</code>, <code>.combobox_input</code>, and
    <code>.combobox_options</code> with <code>.combobox_option</code> elements.
  </p>

  <div class="not-prose bg-white border border-gray-200 rounded-lg p-6 my-6">
    <.basic_combobox_demo {assigns} />
  </div>

  <p>
    Start typing to filter through options. The component automatically handles frontend filtering and keyboard navigation.
    Use arrow keys to navigate and Enter to select.
  </p>

  <h2>Advanced Usage</h2>

  <h3>Server-side Search</h3>
  <p>
    For large datasets or dynamic content, enable server-side search by adding <code>phx-change</code> to the input.
    The component automatically switches to async mode with debounced search queries.
  </p>

  <div class="not-prose bg-white border border-gray-200 rounded-lg p-6 my-6">
    <.live_component module={PrimaWeb.DemoLive.AsyncComboboxDemo} id="async-combobox-demo" />
  </div>

  <p>
    The async pattern sends search queries to your LiveView with automatic debouncing. Handle the <code>phx-change</code>
    event to filter results server-side and update the options dynamically.
  </p>

  <h3>Create Custom Values</h3>
  <p>
    Allow users to create values that don't exist in the predefined list using the <code>.creatable_option</code> component.
    Perfect for tags, categories, or any user-generated content scenarios.
  </p>

  <div class="not-prose bg-white border border-gray-200 rounded-lg p-6 my-6">
    <.creatable_combobox_demo {assigns} />
  </div>

  <p>
    The creatable option automatically appears when the user types something that doesn't match existing options.
    It shows "Create '[user input]'" and submits the typed value when selected.
  </p>

  <h3>Smart Positioning</h3>
  <p>
    Powered by <a href="https://floating-ui.com/" target="_blank" rel="noopener noreferrer" class="text-indigo-600 hover:text-indigo-800">Floating UI</a>, the combobox intelligently positions itself using the <code>placement</code> and <code>offset</code> attributes.
    It automatically flips to the opposite side when there's insufficient space.
  </p>

  <div class="not-prose bg-white border border-gray-200 rounded-lg p-6 my-6">
    <.positioned_combobox_demo />
  </div>

  <p>
    Use <code>placement="top-start"</code>, <code>placement="right-start"</code>, or other positioning options.
    The component automatically repositions on scroll and window resize to stay visible.
  </p>

  <h3>Flexible Markup</h3>
  <p>
    Combobox options support rich, custom markup including icons, descriptions, badges, and complex layouts.
    The component is completely unstyled, giving you full control over the visual presentation.
  </p>

  <div class="not-prose bg-white border border-gray-200 rounded-lg p-6 my-6">
    <.flexible_markup_demo {assigns} />
  </div>

  <p>
    Build complex option layouts with multiple text elements, icons, images, or any HTML content.
    Use <code>group-data-[focus]:text-white</code> and similar selectors to style elements based on focus state.
  </p>
</div>
